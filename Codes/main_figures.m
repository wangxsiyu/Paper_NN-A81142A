masterdir = './TempData';
addpath(genpath('./'));
%%
figdir = W.mkdir('../Figures');
%% loopers
W_lp_folder = W_looper_folder(masterdir, [], [], figdir);
stjobs = W.load(fullfile(masterdir, 'setting_jobs.mat'));
W_lp_sfx = stjobs.W_lp_sfx;
%% get variables sub
sub = W.decell(W_lp_folder.looper_loadall('sub'));
sub = cellfun(@(x)x, sub);
sub = struct2table(sub);
timestep = 50;
time_at = -1000:timestep:2000;
%% set up figures
plt = setup_plot(figdir);
%% setup pipeline for the main analysis
pip = W_pipeline({'folder','sfx'}, W_lp_folder, W_lp_sfx);
pip.plotmode_on(plt);
%% figure behavior
pip.pip_addstep_folder({'all','all'}, 'main_Figure_1_behavior', {'outputname', sub}, {'dataset'}, [], ...
    'outputnames', 'Figure1', ...
    'is_output', true, ...
    'jobname', 'fig-behavior');
pip.pip_addstep('main_optional_Figure_1_compare_3driftrates', {sub}, {}, ...
    'outputnames', 'FigureS6', ...
    'jobname', 'fig-behavior-3driftrates');
pip.pip_addstep_folder({'all','all'}, 'FIG_SUP_RTvsEntropy', {sub}, {'dataset'}, ...
    'outputnames', 'FigureS1');
%% figure ANOVA
pip.pip_addstep_folder({'all','all'}, 'FIG_SUP_ANOVA', {sub}, ...
    {'anova_movingwindow'}, 'outputnames', 'FigureS2');
%% figure ANOVA + decoding
pip.pip_addstep_folder({'all','all'}, 'main_Figure_1_ANOVA_decoding', {sub}, ...
    {'anova_movingwindow', 'decoding_t0t1000_first20'}, [2 3 1], ...
    'is_output', true, ...
    'outputnames', 'Figure2');
pip.pip_addstep_folder({'all','all'}, 'FIG_SUP_decodeDelayDrop', {sub}, {'pca_t0t1000', 'decoding_t0t1000_first20'}, ...
    'outputnames', 'FigureS3');
pip.pip_addstep_folder({'all','all'}, 'main_Figure_2_PC20vs50', {sub, time_at, 1}, ...
    {'decoding_t0t1000_first20', 'decoding_t0t1000_first50'}, [4 5 1 2 3], ...
    'outputnames', 'FigureS4');
%% trajectory
pip.pip_addstep_folder({'all','all'}, 'FIG_SUP_avTRAJ', {sub}, 'x1D_t0t1000_svmp_midRT_nstd', ...
    'outputnames', 'Extended Fig2', 'is_output', true);
%% Energy landscapes
pip.pip_addstep_folder({'all','all'}, 'FIG_SUP_Grad', {sub, 450}, {'EL_t0t1000_svmp_midRT_nstd_npool1_choice'}, ...
    'outputnames', 'Figure3 - inset', 'is_output', false);
% final version
pip.pip_addstep_folder_sfx_all(stjobs.idxlist.id_EL, 'main_FIGURE_1_EL_overtime', {sub}, ...
    {'EL_autosfx', 'x1D_autosfx4'}, [2,3,1], 'outputnames', 'Figure3F', 'is_output', true);
pip.pip_addstep_folder_sfx_all(stjobs.idxlist.id_EL, 'main_FIGURE_2_EL_bycue', {sub, 'medianRT', 'avGrad'}, ...
    {'EL_autosfx6'}, [4,1,2,3], 'outputnames', 'Figure4', 'is_output', true);
pip.pip_addstep_folder_sfx_all(stjobs.idxlist.id_EL, 'main_FIGURE_3_EL_ambiguouscue', {sub, 'medianRT', 'avGrad'}, ...
    {'EL_autosfx6'}, [4,1,2,3], 'outputnames', 'Extended Fig1', 'is_output', true);
%% figures 1-D
tid_1D = W_lp_sfx.next_sfx_ID;
W_lp_sfx.set_sfx({'t0t1000_svmp_midRT_nstd_scaledEV_npool1'});
pip.pip_addstep_folder_sfx_all(tid_1D, 'FIGURE_1D_model', {sub, 'variable5', true}, ...
    {'model1D_autosfx'}, [4,1,2,3], 'outputnames', 'Figure5', 'jobname', '1D model', ...
    'is_output', true);
pip.pip_addstep_folder({'all','all'}, 'FIG_SUP_evidence', {sub}, {'model1D_t0t1000_svmp_midRT_nstd_residue_npool1'}, ...
    'outputnames', 'Extended Fig3', 'jobname', '1D model', ...
    'is_output', true);
%% 1-D evidence
pip.pip_addstep_folder({'all','all'}, 'FIG_SUP_alternative_dimension', {sub, 400}, ...
    {'model1D_t0t1000_svmp_midRT_nstd_scaledEV_npool1', 'model1D_t0t1000_mean_midRT_nstd_scaledEV_npool1'},...
    'outputnames', 'Extended Fig5', 'jobname', '1D model', ...
    'is_output', true);
%% 1-D RT
pip.pip_addstep_folder_sfx_all(tid_1D, 'FIG_1Dmodel_RT', {sub, 'reject'}, ...
    {'model1D_autosfx'}, [4,1,2,3], 'outputnames', 'Figure6', 'jobname', '1D model RT reject', ...
    'is_output', true);
pip.pip_addstep_folder_sfx_all(tid_1D, 'FIG_1Dmodel_RT', {sub, 'accept'}, ...
    {'model1D_autosfx'}, [4,1,2,3], 'outputnames', 'Extended Fig9', 'jobname', '1D model RT accept', ...
    'is_output', true);
%% optional figure rejectonlyx
pip.pip_addstep_folder({'all','all'}, 'FIGURE_rejectonly', {sub}, ...
    {'model1D_t0t1000_svmp_midRT_nstd_scaledEVrejectonly_npool1', 'model1D_t0t1000_svmp_midRT_nstd_scaledEVpyDDM_npool1', 'model1D_t0t1000_svmp_midRT_nstd_scaledEVpyDDMCB_npool1'}, ...
    'outputnames', 'FigureS7', 'jobname', '1D model reject only');
%% control
pip.pip_addstep_folder({'all','all'}, 'FIGURE_1D_control', {sub}, ...
    {'model1D_t0t1000_svmp_midRT_nstd_control_npool1'}, ...
    'outputnames', 'FigureS8', 'jobname', '1D model control');
%% parameter recovery
W_lp_sfx.next_sfx_ID;
W_lp_sfx.set_sfx('t0t1000', {'svmp_midRT'}, {'nstd'}, 'scaledEV', {'npool1'});
pip.pip_addstep_folder_sfx_all(W_lp_sfx.sfxid, 'FIGURE_param_recover', {}, {'model1D_autosfx', 'model1Dsimu_autosfx'}, ...
    'outputnames', 'FigureS10');
%% posterior predictive checks
W_lp_sfx.next_sfx_ID;
W_lp_sfx.set_sfx('t0t1000', {'svmp_midRT'}, {'nstd'}, {'npool1'}, 'choice', {'medianRT'}, {'avGrad'});
pip.pip_addstep_folder_sfx_all(W_lp_sfx.sfxid, 'main_FIGURE_2_EL_bycue', {sub, 'variable7', 'variable8'}, ...
    {'ELsimu_autosfx6'}, [4,1,2,3], 'outputnames', 'Extended Fig10');
%% symmetry 3D
W_lp_sfx.next_sfx_ID;
W_lp_sfx.set_sfx('t0t1000', {'svmp_t0t1000_nstd'}, ...
    {'attractor'}, {'npool3'});
pip.pip_addstep_folder_sfx_all(W_lp_sfx.sfxid, 'main_FIGURE_1_symmetry', {sub}, ...
    {'model3D_autosfx'}, 'outputnames', 'FigureS5');
pip.pip_addstep_folder_sfx_all(stjobs.idxlist.id_3Dmodel, 'main_FIGURE_3_model3D_x0', {'svm', sub}, ...
    {'model3D_autosfx'}, 'outputnames', 'Extended Fig6', 'is_output', true);
%% pos-neg
pip.pip_addstep_folder({'all','all'},'main_FIGURE_1_loadings', {sub}, {'meanFR_posneg', 'loadings_pos_neg'}, ...
    'outputnames', 'Extended Fig7', 'is_output', true);
pip.poweroff;
%%
pip.pip_addstep_folder({'all','all'},'main_FIGURE_2_1D_model', {sub}, {'model1D_posneg'}, ...
    'outputnames', 'Extended Fig8', 'is_output', true);
%% generate jobs
jobs = W_job_looper;
jobs.add_jobs_from_pip(pip);
%% analysis for all versions
jobs.overwrite_off;
jobs.parfor_off;
jobs.run();




%% unused codes
% pip.pip_addstep('main_FIGURE_2_PC20vs50', {plt, sub, time_at, 2}, {'decoding_t0t1000_first20', 'decoding_t0t1000_first50'}, [1 5 6 2 3 4]);
% pip.pip_addstep_sfxlooperinputs(stjobs.idxlist.id_1Danalysis, 'main_FIGURE_1_1Dvs20D', {plt, sub, time_at, 'outputname'}, ...
%     {'decoding1D_autosfx', 'decoding_t0t1000_first20'}, [1,4,5,6,2,3], 'outputnames', 'decode_1D_vs_20D_autosfx');
% pip.pip_addstep_sfxlooperinputs(stjobs.idxlist.id_1Danalysis, 'main_FIGURE_2_changeofmind', {plt, sub, 'outputname'}, ...
%     {'changeofmind1D_autosfx'}, [1,3, 4,2], 'outputnames', 'changeofmind_autosfx');


% lst = W_lp_sfx.sfxlsts{stjobs.idxlist.id_1Dmodel}';
% lst = lst(contains(lst, 'scaled') | contains(lst, 'residue'),:);
% lst = lst(~contains(lst, 'reject') & ~contains(lst, 'pyDDM'),:);
% lst = W.str2cell(lst);
% lst = lst(contains(lst, {'t0t1000_svmp_midRT_nstd_scaledEV_npool1','t0t1000_svmp_midRT_nstd_residue_npool1', ...
%     't0t1000_svmp_midRT_nstd_scaledEVloc_npool1'}));
% lst = lst(contains(lst, {'t0t1000_svmp_midRT_nstd_scaledEV_npool1'}));
% lst = unique(lst);


% pip.pip_addstep_sfxlooperinputs(tid_1D, 'FIGURE_1D_model', {plt, 'outputname', sub, 'variable5', false}, ...
%     {'model1D_autosfx'}, [1,2,6,3,4,5], 'outputnames', '1Dmodel_autosfx', 'jobname', '1D model');